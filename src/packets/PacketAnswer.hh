#ifndef ANSWERPACKET_H_
# define ANSWERPACKET_H_

# include	<cstdint>
# include	"APacket.hh"

class PacketAnswer : public APacket
{
public:
  typedef enum	e_answerCode
    {
      HELLO_INVALID_SALT = 100,

      AUTH_ACCOUNT_NAME_NOT_FOUND = 200,
      AUTH_BAD_PASSWORD = 201,
      AUTH_ACCOUNT_BANNED = 202,
      AUTH_BAD_ACCOUNT_NAME = 203,
      AUTH_FAILED = 204,

      REGISTER_ACCOUNT_NAME_TAKEN = 300,
      REGISTER_PASSWORD_INVALID = 301,
      REGISTER_ACCOUNT_NAME_INVALID = 302,
      REGISTER_ACCOUNT_CREATED = 310,

      LOGIN_SUCCESS_INVALID_USERNAME = 400,
      LOGIN_SUCCESS_INVALID_STATUS = 400,

      ADD_CONTACT_USER_ID_NOT_FOUND = 1001,
      ADD_CONTACT_REQUEST_ALREADY_SEND = 1002,
      ADD_CONTACT_ALREADY_FRIEND = 1003,
      ADD_CONTACT_SUCCESS_WAITING = 1010,
      ADD_CONTACT_SUCCESS_FRIEND = 1011,

      CONTACT_REQUEST_INVALID_USERNAME = 1100,
      CONTACT_REQUEST_INVALID_STATUS = 1101,

      CONTACT_LIST_INVALID_USERNAME = 1200,
      CONTACT_LIST_INVALID_STATUS = 1201,

      UPDATE_USERNAME_INVALID = 2000,
      UPDATE_USERNAME_SUCCESS = 2010,

      UPDATE_STATUS_SUCCESS = 2100,
      UPDATE_STATUS_INVALID = 2110,

      SEARCH_USER_INVALID_PATTERN = 2300,
      SEARCH_USER_NOT_FOUND = 2301,

      SEARCH_RESULT_INVALID_USERNAME = 2400,
      SEARCH_RESULT_INVALID_STATUS = 2401,

      CREATE_CHANNEL_USERS_DOESNT_EXISTS = 3000,
      CREATE_CHANNEL_USERS_NOT_CONNECTED = 3001,
      CREATE_CHANNEL_ALREADY_EXISTS = 3002,

      ADD_USER_TO_CHANNEL_CHANID_DOESNT_EXISTS = 3201,
      ADD_USER_TO_CHANNEL_USER_DOESNT_EXISTS = 3202,
      ADD_USER_TO_CHANNEL_PERMISSION_DENIED = 3203,
      ADD_USER_TO_CHANNEL_USER_NOT_IN_CONTACT_LIST = 3204,
      ADD_USER_TO_CHANNEL_SUCCESS = 3210,

      SEND_MESSAGE_CHAN_USER_DOESNT_EXISTS = 3400,
      SEND_MESSAGE_PERMISSION_DENIED = 3401,

      CALL_USER_NOT_FOUND = 4001,
      CALL_USER_OFFLINE = 4002,
      CALL_ROOM_DOESNT_EXIST = 4003,
      CALL_HOST_NOT_IN_ROOM = 4004,
      CALL_USER_NOT_IN_ROOM = 4005,
      CALL_REQUEST_SENT = 4010
    }		AnswerCode;

private:
  uint16_t	m_code;

public:
  PacketAnswer(uint16_t code = 0);
  ~PacketAnswer() {}

  void unserialize(SerializerBuffer *inBuffer);
  SerializerBuffer *serialize() const;

  uint16_t getCode() const;
  void setCode(const e_answerCode code);

private:
  PacketAnswer(const PacketAnswer &);
  PacketAnswer &operator=(const PacketAnswer &);
};

#endif /* !ANSWERPACKET_H_ */
